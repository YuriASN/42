void	(*pointertofunc)(char)	//Primeiro () declara o nome do pointer da funcao.
								//Segundo () declara o tipo de variavel que ela recebe. No caso de 
								//pointer de func nao e' necessario declarar nome da variavel

EXEMPLO:

#include <unistd.h>

void	ft_putchar(char c)
{
	write(1, &c, 1);
}

int	main(void)
{
	void	(*f)(char);				//declarei o pointer de funcao "f".

	f = &ft_putchar;				//passei o endereco da funcao para o pointer.
	f('z');							//Usei a ft_putchar atravez do pointer.
	return (0);
}


Posso utilizar um "typedef" para agilizar o processo se for repetir. ex.:

typedef void (*funptr)(char);


main..
{
	...
	funptr	f;						//declarei o pointer de funcao "f" atravez do typedef.
	...
}

Usos:

#include <stdio.h>
void add(int a, int b)
{
    printf("Addition is %d\n", a+b);
}
void subtract(int a, int b)
{
    printf("Subtraction is %d\n", a-b);
}
void multiply(int a, int b)
{
    printf("Multiplication is %d\n", a*b);
}
  
int main()
{
    // fun_ptr_arr is an array of function pointers
    void (*fun_ptr_arr[])(int, int) = {add, subtract, multiply};
    unsigned int ch, a = 15, b = 10;
  
    printf("Enter Choice: 0 for add, 1 for subtract and 2 "
            "for multiply\n");
    scanf("%d", &ch);
  
    if (ch > 2) return 0;
  
    (*fun_ptr_arr[ch])(a, b);
  
    return 0;
}

USO 2

// A simple C program to show function pointers as parameter
#include <stdio.h>

// Two simple functions
void fun1() { printf("Fun1\n"); }
void fun2() { printf("Fun2\n"); }

// A function that receives a simple function
// as parameter and calls the function
void wrapper(void (*fun)())
{
	fun();
}

int main()
{
	wrapper(fun1);
	wrapper(fun2);
	return 0;
}

